-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.Enum.VatRates exposing (..)

import Json.Decode as Decode exposing (Decoder)


type VatRates
    = V_023
    | V_08
    | V_05
    | V_00


list : List VatRates
list =
    [ V_023, V_08, V_05, V_00 ]


decoder : Decoder VatRates
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "v_023" ->
                        Decode.succeed V_023

                    "v_08" ->
                        Decode.succeed V_08

                    "v_05" ->
                        Decode.succeed V_05

                    "v_00" ->
                        Decode.succeed V_00

                    _ ->
                        Decode.fail ("Invalid VatRates type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : VatRates -> String
toString enum____ =
    case enum____ of
        V_023 ->
            "v_023"

        V_08 ->
            "v_08"

        V_05 ->
            "v_05"

        V_00 ->
            "v_00"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe VatRates
fromString enumString____ =
    case enumString____ of
        "v_023" ->
            Just V_023

        "v_08" ->
            Just V_08

        "v_05" ->
            Just V_05

        "v_00" ->
            Just V_00

        _ ->
            Nothing
