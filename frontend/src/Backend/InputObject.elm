-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Backend.InputObject exposing (..)

import Backend.Enum.InvoiceType
import Backend.Enum.VatRates
import Backend.Interface
import Backend.Object
import Backend.Scalar
import Backend.ScalarCodecs
import Backend.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildInvoiceInput :
    InvoiceInputRequiredFields
    -> (InvoiceInputOptionalFields -> InvoiceInputOptionalFields)
    -> InvoiceInput
buildInvoiceInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { invoicePositions = Absent }
    in
    { invoiceId = required____.invoiceId, invoiceDate = required____.invoiceDate, invoiceType = required____.invoiceType, partner = required____.partner, invoicePositions = optionals____.invoicePositions }


type alias InvoiceInputRequiredFields =
    { invoiceId : String
    , invoiceDate : Backend.ScalarCodecs.Date
    , invoiceType : Backend.Enum.InvoiceType.InvoiceType
    , partner : TradingPartnerSelection
    }


type alias InvoiceInputOptionalFields =
    { invoicePositions : OptionalArgument (List (Maybe InvoicePositionInput)) }


{-| Type for the InvoiceInput input object.
-}
type alias InvoiceInput =
    { invoiceId : String
    , invoiceDate : Backend.ScalarCodecs.Date
    , invoiceType : Backend.Enum.InvoiceType.InvoiceType
    , partner : TradingPartnerSelection
    , invoicePositions : OptionalArgument (List (Maybe InvoicePositionInput))
    }


{-| Encode a InvoiceInput into a value that can be used as an argument.
-}
encodeInvoiceInput : InvoiceInput -> Value
encodeInvoiceInput input____ =
    Encode.maybeObject
        [ ( "invoiceId", Encode.string input____.invoiceId |> Just ), ( "invoiceDate", (Backend.ScalarCodecs.codecs |> Backend.Scalar.unwrapEncoder .codecDate) input____.invoiceDate |> Just ), ( "invoiceType", Encode.enum Backend.Enum.InvoiceType.toString input____.invoiceType |> Just ), ( "partner", encodeTradingPartnerSelection input____.partner |> Just ), ( "invoicePositions", (encodeInvoicePositionInput |> Encode.maybe |> Encode.list) |> Encode.optional input____.invoicePositions ) ]


buildInvoicePositionInput :
    (InvoicePositionInputOptionalFields -> InvoicePositionInputOptionalFields)
    -> InvoicePositionInput
buildInvoicePositionInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, vatRate = Absent, numItems = Absent, priceNet = Absent }
    in
    { name = optionals____.name, vatRate = optionals____.vatRate, numItems = optionals____.numItems, priceNet = optionals____.priceNet }


type alias InvoicePositionInputOptionalFields =
    { name : OptionalArgument String
    , vatRate : OptionalArgument Backend.Enum.VatRates.VatRates
    , numItems : OptionalArgument Float
    , priceNet : OptionalArgument Float
    }


{-| Type for the InvoicePositionInput input object.
-}
type alias InvoicePositionInput =
    { name : OptionalArgument String
    , vatRate : OptionalArgument Backend.Enum.VatRates.VatRates
    , numItems : OptionalArgument Float
    , priceNet : OptionalArgument Float
    }


{-| Encode a InvoicePositionInput into a value that can be used as an argument.
-}
encodeInvoicePositionInput : InvoicePositionInput -> Value
encodeInvoicePositionInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input____.name ), ( "vatRate", Encode.enum Backend.Enum.VatRates.toString |> Encode.optional input____.vatRate ), ( "numItems", Encode.float |> Encode.optional input____.numItems ), ( "priceNet", Encode.float |> Encode.optional input____.priceNet ) ]


buildTradingPartnerSelection :
    (TradingPartnerSelectionOptionalFields -> TradingPartnerSelectionOptionalFields)
    -> TradingPartnerSelection
buildTradingPartnerSelection fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { nipNumber = Absent }
    in
    { nipNumber = optionals____.nipNumber }


type alias TradingPartnerSelectionOptionalFields =
    { nipNumber : OptionalArgument String }


{-| Type for the TradingPartnerSelection input object.
-}
type alias TradingPartnerSelection =
    { nipNumber : OptionalArgument String }


{-| Encode a TradingPartnerSelection into a value that can be used as an argument.
-}
encodeTradingPartnerSelection : TradingPartnerSelection -> Value
encodeTradingPartnerSelection input____ =
    Encode.maybeObject
        [ ( "nipNumber", Encode.string |> Encode.optional input____.nipNumber ) ]
