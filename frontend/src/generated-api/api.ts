/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CurrentUserResponse
 */
export interface CurrentUserResponse {
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUserResponse
     */
    username: string;
    /**
     * 
     * @type {number}
     * @memberof CurrentUserResponse
     */
    fav_enterprise_id?: number;
}
/**
 * 
 * @export
 * @interface EnterpriseCreateInput
 */
export interface EnterpriseCreateInput {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateInput
     */
    nip_number: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateInput
     */
    address: string;
}
/**
 * 
 * @export
 * @interface EnterpriseCreateResponse
 */
export interface EnterpriseCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof EnterpriseCreateResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateResponse
     */
    nip_number: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseCreateResponse
     */
    address: string;
}
/**
 * 
 * @export
 * @interface EnterpriseResponse
 */
export interface EnterpriseResponse {
    /**
     * 
     * @type {number}
     * @memberof EnterpriseResponse
     */
    enterprise_id: number;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseResponse
     */
    name: string;
    /**
     * 
     * @type {UserEnterpriseRoles}
     * @memberof EnterpriseResponse
     */
    role: UserEnterpriseRoles;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseResponse
     */
    nip_number: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseResponse
     */
    address: string;
}
/**
 * 
 * @export
 * @interface EnterpriseUpdateResponse
 */
export interface EnterpriseUpdateResponse {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseUpdateResponse
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseUpdateResponse
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseUpdateResponse
     */
    nip_number?: string;
}
/**
 * 
 * @export
 * @interface FavEnterpriseResponse
 */
export interface FavEnterpriseResponse {
    /**
     * 
     * @type {number}
     * @memberof FavEnterpriseResponse
     */
    fav_enterprise: number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface InvoiceInput
 */
export interface InvoiceInput {
    /**
     * 
     * @type {number}
     * @memberof InvoiceInput
     */
    enterprise_id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceInput
     */
    trading_partner_id: number;
    /**
     * 
     * @type {InvoiceType}
     * @memberof InvoiceInput
     */
    invoice_type: InvoiceType;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInput
     */
    invoice_date: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInput
     */
    invoice_business_id: string;
    /**
     * 
     * @type {Array<InvoicePositionInput>}
     * @memberof InvoiceInput
     */
    invoicepositions: Array<InvoicePositionInput>;
}
/**
 * 
 * @export
 * @interface InvoiceListResponse
 */
export interface InvoiceListResponse {
    /**
     * 
     * @type {number}
     * @memberof InvoiceListResponse
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceListResponse
     */
    enterprise_id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceListResponse
     */
    trading_partner_id: number;
    /**
     * 
     * @type {InvoiceType}
     * @memberof InvoiceListResponse
     */
    invoice_type: InvoiceType;
    /**
     * 
     * @type {string}
     * @memberof InvoiceListResponse
     */
    invoice_date: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceListResponse
     */
    invoice_business_id: string;
    /**
     * 
     * @type {Array<InvoicePositionResponse>}
     * @memberof InvoiceListResponse
     */
    invoicepositions: Array<InvoicePositionResponse>;
    /**
     * 
     * @type {string}
     * @memberof InvoiceListResponse
     */
    trading_partner_name: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceListResponse
     */
    trading_partner_nip: string;
}
/**
 * 
 * @export
 * @interface InvoicePositionInput
 */
export interface InvoicePositionInput {
    /**
     * 
     * @type {string}
     * @memberof InvoicePositionInput
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionInput
     */
    vat_rate_id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionInput
     */
    num_items: number;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionInput
     */
    price_net: number;
}
/**
 * 
 * @export
 * @interface InvoicePositionResponse
 */
export interface InvoicePositionResponse {
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof InvoicePositionResponse
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionResponse
     */
    vat_rate_id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionResponse
     */
    num_items: number;
    /**
     * 
     * @type {number}
     * @memberof InvoicePositionResponse
     */
    price_net: number;
}
/**
 * 
 * @export
 * @interface InvoiceResponse
 */
export interface InvoiceResponse {
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponse
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponse
     */
    enterprise_id: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponse
     */
    trading_partner_id: number;
    /**
     * 
     * @type {InvoiceType}
     * @memberof InvoiceResponse
     */
    invoice_type: InvoiceType;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponse
     */
    invoice_date: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponse
     */
    invoice_business_id: string;
    /**
     * 
     * @type {Array<InvoicePositionResponse>}
     * @memberof InvoiceResponse
     */
    invoicepositions: Array<InvoicePositionResponse>;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum InvoiceType {
    Inbound = 'INBOUND',
    Outbound = 'OUTBOUND'
}

/**
 * 
 * @export
 * @interface InvoiceUpdateResponse
 */
export interface InvoiceUpdateResponse {
    /**
     * 
     * @type {number}
     * @memberof InvoiceUpdateResponse
     */
    enterprise_id?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceUpdateResponse
     */
    trading_partner_id?: number;
    /**
     * 
     * @type {InvoiceType}
     * @memberof InvoiceUpdateResponse
     */
    invoice_type?: InvoiceType;
    /**
     * 
     * @type {string}
     * @memberof InvoiceUpdateResponse
     */
    invoice_date?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceUpdateResponse
     */
    invoice_business_id?: string;
    /**
     * 
     * @type {Array<InvoicePositionInput>}
     * @memberof InvoiceUpdateResponse
     */
    invoicepositions?: Array<InvoicePositionInput>;
}
/**
 * 
 * @export
 * @interface LoginInput
 */
export interface LoginInput {
    /**
     * 
     * @type {string}
     * @memberof LoginInput
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginInput
     */
    password: string;
}
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    detail: string;
}
/**
 * 
 * @export
 * @interface RegisterInput
 */
export interface RegisterInput {
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterInput
     */
    password: string;
}
/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterResponse
     */
    email: string;
}
/**
 * 
 * @export
 * @interface RegonApiNotFoundFailure
 */
export interface RegonApiNotFoundFailure {
    /**
     * 
     * @type {string}
     * @memberof RegonApiNotFoundFailure
     */
    error_code: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiNotFoundFailure
     */
    error_message_pl: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiNotFoundFailure
     */
    error_message_en: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiNotFoundFailure
     */
    nip_number: string;
}
/**
 * 
 * @export
 * @interface RegonApiSuccess
 */
export interface RegonApiSuccess {
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    regon?: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    nip: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    nip_status?: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    company_name: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    voivodeship: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    powiat: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    gmina: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    postal_code: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    street: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    house_no: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    suite_no?: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    silos_id: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    shutdown_date?: string;
    /**
     * 
     * @type {string}
     * @memberof RegonApiSuccess
     */
    post_office_town: string;
}
/**
 * 
 * @export
 * @interface TradingPartnerInput
 */
export interface TradingPartnerInput {
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerInput
     */
    nip_number: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerInput
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerInput
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof TradingPartnerInput
     */
    enterprise_id: number;
}
/**
 * 
 * @export
 * @interface TradingPartnerResponse
 */
export interface TradingPartnerResponse {
    /**
     * 
     * @type {number}
     * @memberof TradingPartnerResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerResponse
     */
    nip_number: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerResponse
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof TradingPartnerResponse
     */
    enterprise_id: number;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export enum UserEnterpriseRoles {
    Viewer = 'VIEWER',
    Editor = 'EDITOR',
    Admin = 'ADMIN'
}

/**
 * 
 * @export
 * @interface UserUpdateEnterpriseResponse
 */
export interface UserUpdateEnterpriseResponse {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateEnterpriseResponse
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateEnterpriseResponse
     */
    username?: string;
    /**
     * 
     * @type {number}
     * @memberof UserUpdateEnterpriseResponse
     */
    fav_enterprise_id: number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface VatRateResponse
 */
export interface VatRateResponse {
    /**
     * 
     * @type {number}
     * @memberof VatRateResponse
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof VatRateResponse
     */
    vat_rate: number;
    /**
     * 
     * @type {string}
     * @memberof VatRateResponse
     */
    comment: string;
    /**
     * 
     * @type {number}
     * @memberof VatRateResponse
     */
    enterprise_id: number;
}
/**
 * 
 * @export
 * @interface VatrateInput
 */
export interface VatrateInput {
    /**
     * 
     * @type {number}
     * @memberof VatrateInput
     */
    vat_rate: number;
    /**
     * 
     * @type {string}
     * @memberof VatrateInput
     */
    comment: string;
    /**
     * 
     * @type {number}
     * @memberof VatrateInput
     */
    enterprise_id: number;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginInput} loginInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserLoginPost: async (loginInput: LoginInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginInput' is not null or undefined
            assertParamExists('loginUserLoginPost', 'loginInput', loginInput)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutLogoutPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {RegisterInput} registerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserRegisterPost: async (registerInput: RegisterInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerInput' is not null or undefined
            assertParamExists('registerUserRegisterPost', 'registerInput', registerInput)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginInput} loginInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUserLoginPost(loginInput: LoginInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUserLoginPost(loginInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutLogoutPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {RegisterInput} registerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUserRegisterPost(registerInput: RegisterInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUserRegisterPost(registerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginInput} loginInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUserLoginPost(loginInput: LoginInput, options?: any): AxiosPromise<void> {
            return localVarFp.loginUserLoginPost(loginInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.logoutLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {RegisterInput} registerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUserRegisterPost(registerInput: RegisterInput, options?: any): AxiosPromise<RegisterResponse> {
            return localVarFp.registerUserRegisterPost(registerInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Login User
     * @param {LoginInput} loginInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginUserLoginPost(loginInput: LoginInput, options?: any) {
        return AuthenticationApiFp(this.configuration).loginUserLoginPost(loginInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutLogoutPost(options?: any) {
        return AuthenticationApiFp(this.configuration).logoutLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {RegisterInput} registerInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerUserRegisterPost(registerInput: RegisterInput, options?: any) {
        return AuthenticationApiFp(this.configuration).registerUserRegisterPost(registerInput, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnterpriseApi - axios parameter creator
 * @export
 */
export const EnterpriseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Enterprise
         * @param {EnterpriseCreateInput} enterpriseCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseEnterprisePost: async (enterpriseCreateInput: EnterpriseCreateInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseCreateInput' is not null or undefined
            assertParamExists('createEnterpriseEnterprisePost', 'enterpriseCreateInput', enterpriseCreateInput)
            const localVarPath = `/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enterpriseCreateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Enterprise
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnterpriseEnterpriseEnterpriseIdDelete: async (enterpriseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('deleteEnterpriseEnterpriseEnterpriseIdDelete', 'enterpriseId', enterpriseId)
            const localVarPath = `/enterprise/{enterprise_id}`
                .replace(`{${"enterprise_id"}}`, encodeURIComponent(String(enterpriseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Enterprises
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEnterprisesEnterpriseGet: async (page: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getUserEnterprisesEnterpriseGet', 'page', page)
            const localVarPath = `/enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} enterpriseId 
         * @param {EnterpriseUpdateResponse} enterpriseUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseEnterpriseEnterpriseIdPatch: async (enterpriseId: number, enterpriseUpdateResponse: EnterpriseUpdateResponse, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('updateEnterpriseEnterpriseEnterpriseIdPatch', 'enterpriseId', enterpriseId)
            // verify required parameter 'enterpriseUpdateResponse' is not null or undefined
            assertParamExists('updateEnterpriseEnterpriseEnterpriseIdPatch', 'enterpriseUpdateResponse', enterpriseUpdateResponse)
            const localVarPath = `/enterprise/{enterprise_id}`
                .replace(`{${"enterprise_id"}}`, encodeURIComponent(String(enterpriseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enterpriseUpdateResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnterpriseApi - functional programming interface
 * @export
 */
export const EnterpriseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnterpriseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Enterprise
         * @param {EnterpriseCreateInput} enterpriseCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnterpriseEnterprisePost(enterpriseCreateInput: EnterpriseCreateInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnterpriseCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnterpriseEnterprisePost(enterpriseCreateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Enterprise
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Enterprises
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEnterprisesEnterpriseGet(page: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnterpriseResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEnterprisesEnterpriseGet(page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} enterpriseId 
         * @param {EnterpriseUpdateResponse} enterpriseUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId: number, enterpriseUpdateResponse: EnterpriseUpdateResponse, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnterpriseUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId, enterpriseUpdateResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnterpriseApi - factory interface
 * @export
 */
export const EnterpriseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnterpriseApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Enterprise
         * @param {EnterpriseCreateInput} enterpriseCreateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnterpriseEnterprisePost(enterpriseCreateInput: EnterpriseCreateInput, options?: any): AxiosPromise<EnterpriseCreateResponse> {
            return localVarFp.createEnterpriseEnterprisePost(enterpriseCreateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Enterprise
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Enterprises
         * @param {number} page 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEnterprisesEnterpriseGet(page: number, options?: any): AxiosPromise<Array<EnterpriseResponse>> {
            return localVarFp.getUserEnterprisesEnterpriseGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} enterpriseId 
         * @param {EnterpriseUpdateResponse} enterpriseUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId: number, enterpriseUpdateResponse: EnterpriseUpdateResponse, options?: any): AxiosPromise<EnterpriseUpdateResponse> {
            return localVarFp.updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId, enterpriseUpdateResponse, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnterpriseApi - object-oriented interface
 * @export
 * @class EnterpriseApi
 * @extends {BaseAPI}
 */
export class EnterpriseApi extends BaseAPI {
    /**
     * 
     * @summary Create Enterprise
     * @param {EnterpriseCreateInput} enterpriseCreateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public createEnterpriseEnterprisePost(enterpriseCreateInput: EnterpriseCreateInput, options?: any) {
        return EnterpriseApiFp(this.configuration).createEnterpriseEnterprisePost(enterpriseCreateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Enterprise
     * @param {number} enterpriseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId: number, options?: any) {
        return EnterpriseApiFp(this.configuration).deleteEnterpriseEnterpriseEnterpriseIdDelete(enterpriseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Enterprises
     * @param {number} page 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public getUserEnterprisesEnterpriseGet(page: number, options?: any) {
        return EnterpriseApiFp(this.configuration).getUserEnterprisesEnterpriseGet(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Enterprise
     * @param {number} enterpriseId 
     * @param {EnterpriseUpdateResponse} enterpriseUpdateResponse 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnterpriseApi
     */
    public updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId: number, enterpriseUpdateResponse: EnterpriseUpdateResponse, options?: any) {
        return EnterpriseApiFp(this.configuration).updateEnterpriseEnterpriseEnterpriseIdPatch(enterpriseId, enterpriseUpdateResponse, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Invoice
         * @param {InvoiceInput} invoiceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInvoiceInvoicePost: async (invoiceInput: InvoiceInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceInput' is not null or undefined
            assertParamExists('addInvoiceInvoicePost', 'invoiceInput', invoiceInput)
            const localVarPath = `/invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Invoice
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoiceInvoiceDelete: async (invoiceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('deleteInvoiceInvoiceDelete', 'invoiceId', invoiceId)
            const localVarPath = `/invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (invoiceId !== undefined) {
                localVarQueryParameter['invoice_id'] = invoiceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Invoice
         * @param {number} enterpriseId 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceInvoiceGet: async (enterpriseId: number, invoiceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('getInvoiceInvoiceGet', 'enterpriseId', enterpriseId)
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('getInvoiceInvoiceGet', 'invoiceId', invoiceId)
            const localVarPath = `/invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (enterpriseId !== undefined) {
                localVarQueryParameter['enterprise_id'] = enterpriseId;
            }

            if (invoiceId !== undefined) {
                localVarQueryParameter['invoice_id'] = invoiceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Invoice List
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceListInvoiceListGet: async (page: number, enterpriseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getInvoiceListInvoiceListGet', 'page', page)
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('getInvoiceListInvoiceListGet', 'enterpriseId', enterpriseId)
            const localVarPath = `/invoice_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (enterpriseId !== undefined) {
                localVarQueryParameter['enterprise_id'] = enterpriseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Invoice
         * @param {number} invoiceId 
         * @param {InvoiceUpdateResponse} invoiceUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoiceInvoiceInvoiceIdPatch: async (invoiceId: number, invoiceUpdateResponse: InvoiceUpdateResponse, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('updateInvoiceInvoiceInvoiceIdPatch', 'invoiceId', invoiceId)
            // verify required parameter 'invoiceUpdateResponse' is not null or undefined
            assertParamExists('updateInvoiceInvoiceInvoiceIdPatch', 'invoiceUpdateResponse', invoiceUpdateResponse)
            const localVarPath = `/invoice/{invoice_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceUpdateResponse, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Invoice
         * @param {InvoiceInput} invoiceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInvoiceInvoicePost(invoiceInput: InvoiceInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInvoiceInvoicePost(invoiceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Invoice
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvoiceInvoiceDelete(invoiceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInvoiceInvoiceDelete(invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Invoice
         * @param {number} enterpriseId 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoiceInvoiceGet(enterpriseId: number, invoiceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoiceInvoiceGet(enterpriseId, invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Invoice List
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoiceListInvoiceListGet(page: number, enterpriseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceListResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoiceListInvoiceListGet(page, enterpriseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Invoice
         * @param {number} invoiceId 
         * @param {InvoiceUpdateResponse} invoiceUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvoiceInvoiceInvoiceIdPatch(invoiceId: number, invoiceUpdateResponse: InvoiceUpdateResponse, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInvoiceInvoiceInvoiceIdPatch(invoiceId, invoiceUpdateResponse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Invoice
         * @param {InvoiceInput} invoiceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInvoiceInvoicePost(invoiceInput: InvoiceInput, options?: any): AxiosPromise<InvoiceResponse> {
            return localVarFp.addInvoiceInvoicePost(invoiceInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Invoice
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoiceInvoiceDelete(invoiceId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteInvoiceInvoiceDelete(invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Invoice
         * @param {number} enterpriseId 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceInvoiceGet(enterpriseId: number, invoiceId: number, options?: any): AxiosPromise<InvoiceResponse> {
            return localVarFp.getInvoiceInvoiceGet(enterpriseId, invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Invoice List
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoiceListInvoiceListGet(page: number, enterpriseId: number, options?: any): AxiosPromise<Array<InvoiceListResponse>> {
            return localVarFp.getInvoiceListInvoiceListGet(page, enterpriseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Invoice
         * @param {number} invoiceId 
         * @param {InvoiceUpdateResponse} invoiceUpdateResponse 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoiceInvoiceInvoiceIdPatch(invoiceId: number, invoiceUpdateResponse: InvoiceUpdateResponse, options?: any): AxiosPromise<InvoiceUpdateResponse> {
            return localVarFp.updateInvoiceInvoiceInvoiceIdPatch(invoiceId, invoiceUpdateResponse, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export class InvoiceApi extends BaseAPI {
    /**
     * 
     * @summary Add Invoice
     * @param {InvoiceInput} invoiceInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public addInvoiceInvoicePost(invoiceInput: InvoiceInput, options?: any) {
        return InvoiceApiFp(this.configuration).addInvoiceInvoicePost(invoiceInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Invoice
     * @param {number} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public deleteInvoiceInvoiceDelete(invoiceId: number, options?: any) {
        return InvoiceApiFp(this.configuration).deleteInvoiceInvoiceDelete(invoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Invoice
     * @param {number} enterpriseId 
     * @param {number} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getInvoiceInvoiceGet(enterpriseId: number, invoiceId: number, options?: any) {
        return InvoiceApiFp(this.configuration).getInvoiceInvoiceGet(enterpriseId, invoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Invoice List
     * @param {number} page 
     * @param {number} enterpriseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public getInvoiceListInvoiceListGet(page: number, enterpriseId: number, options?: any) {
        return InvoiceApiFp(this.configuration).getInvoiceListInvoiceListGet(page, enterpriseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Invoice
     * @param {number} invoiceId 
     * @param {InvoiceUpdateResponse} invoiceUpdateResponse 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    public updateInvoiceInvoiceInvoiceIdPatch(invoiceId: number, invoiceUpdateResponse: InvoiceUpdateResponse, options?: any) {
        return InvoiceApiFp(this.configuration).updateInvoiceInvoiceInvoiceIdPatch(invoiceId, invoiceUpdateResponse, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * REGONAPIApi - axios parameter creator
 * @export
 */
export const REGONAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Info By Nip
         * @param {string} nipNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoByNipRegonApiNipNumberNipNumberGet: async (nipNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nipNumber' is not null or undefined
            assertParamExists('getInfoByNipRegonApiNipNumberNipNumberGet', 'nipNumber', nipNumber)
            const localVarPath = `/regon_api/nip_number/{nip_number}`
                .replace(`{${"nip_number"}}`, encodeURIComponent(String(nipNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Info By Regon
         * @param {string} regonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoByRegonRegonApiRegonNumberRegonNumberGet: async (regonNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'regonNumber' is not null or undefined
            assertParamExists('getInfoByRegonRegonApiRegonNumberRegonNumberGet', 'regonNumber', regonNumber)
            const localVarPath = `/regon_api/regon_number/{regon_number}`
                .replace(`{${"regon_number"}}`, encodeURIComponent(String(regonNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * REGONAPIApi - functional programming interface
 * @export
 */
export const REGONAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = REGONAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Info By Nip
         * @param {string} nipNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegonApiSuccess | RegonApiNotFoundFailure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Info By Regon
         * @param {string} regonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegonApiSuccess | RegonApiNotFoundFailure>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * REGONAPIApi - factory interface
 * @export
 */
export const REGONAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = REGONAPIApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Info By Nip
         * @param {string} nipNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber: string, options?: any): AxiosPromise<RegonApiSuccess | RegonApiNotFoundFailure> {
            return localVarFp.getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Info By Regon
         * @param {string} regonNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber: string, options?: any): AxiosPromise<RegonApiSuccess | RegonApiNotFoundFailure> {
            return localVarFp.getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * REGONAPIApi - object-oriented interface
 * @export
 * @class REGONAPIApi
 * @extends {BaseAPI}
 */
export class REGONAPIApi extends BaseAPI {
    /**
     * 
     * @summary Get Info By Nip
     * @param {string} nipNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof REGONAPIApi
     */
    public getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber: string, options?: any) {
        return REGONAPIApiFp(this.configuration).getInfoByNipRegonApiNipNumberNipNumberGet(nipNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Info By Regon
     * @param {string} regonNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof REGONAPIApi
     */
    public getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber: string, options?: any) {
        return REGONAPIApiFp(this.configuration).getInfoByRegonRegonApiRegonNumberRegonNumberGet(regonNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TradingPartnerApi - axios parameter creator
 * @export
 */
export const TradingPartnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Trading Partner
         * @param {TradingPartnerInput} tradingPartnerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTradingPartnerTradingPartnerPost: async (tradingPartnerInput: TradingPartnerInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tradingPartnerInput' is not null or undefined
            assertParamExists('addTradingPartnerTradingPartnerPost', 'tradingPartnerInput', tradingPartnerInput)
            const localVarPath = `/trading_partner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tradingPartnerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Trading Partners
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingPartnersTradingPartnerGet: async (page: number, enterpriseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getTradingPartnersTradingPartnerGet', 'page', page)
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('getTradingPartnersTradingPartnerGet', 'enterpriseId', enterpriseId)
            const localVarPath = `/trading_partner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (enterpriseId !== undefined) {
                localVarQueryParameter['enterprise_id'] = enterpriseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradingPartnerApi - functional programming interface
 * @export
 */
export const TradingPartnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradingPartnerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Trading Partner
         * @param {TradingPartnerInput} tradingPartnerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTradingPartnerTradingPartnerPost(tradingPartnerInput: TradingPartnerInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradingPartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTradingPartnerTradingPartnerPost(tradingPartnerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Trading Partners
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradingPartnersTradingPartnerGet(page: number, enterpriseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TradingPartnerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradingPartnersTradingPartnerGet(page, enterpriseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TradingPartnerApi - factory interface
 * @export
 */
export const TradingPartnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradingPartnerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Trading Partner
         * @param {TradingPartnerInput} tradingPartnerInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTradingPartnerTradingPartnerPost(tradingPartnerInput: TradingPartnerInput, options?: any): AxiosPromise<TradingPartnerResponse> {
            return localVarFp.addTradingPartnerTradingPartnerPost(tradingPartnerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Trading Partners
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingPartnersTradingPartnerGet(page: number, enterpriseId: number, options?: any): AxiosPromise<Array<TradingPartnerResponse>> {
            return localVarFp.getTradingPartnersTradingPartnerGet(page, enterpriseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradingPartnerApi - object-oriented interface
 * @export
 * @class TradingPartnerApi
 * @extends {BaseAPI}
 */
export class TradingPartnerApi extends BaseAPI {
    /**
     * 
     * @summary Add Trading Partner
     * @param {TradingPartnerInput} tradingPartnerInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingPartnerApi
     */
    public addTradingPartnerTradingPartnerPost(tradingPartnerInput: TradingPartnerInput, options?: any) {
        return TradingPartnerApiFp(this.configuration).addTradingPartnerTradingPartnerPost(tradingPartnerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Trading Partners
     * @param {number} page 
     * @param {number} enterpriseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingPartnerApi
     */
    public getTradingPartnersTradingPartnerGet(page: number, enterpriseId: number, options?: any) {
        return TradingPartnerApiFp(this.configuration).getTradingPartnersTradingPartnerGet(page, enterpriseId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Fav Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavEnterpriseUserMePreferredEnterpriseGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me/preferred_enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDataUserMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} favEnterprise 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseUserMePreferredEnterprisePatch: async (favEnterprise: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'favEnterprise' is not null or undefined
            assertParamExists('updateEnterpriseUserMePreferredEnterprisePatch', 'favEnterprise', favEnterprise)
            const localVarPath = `/user/me/preferred_enterprise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (favEnterprise !== undefined) {
                localVarQueryParameter['fav_enterprise'] = favEnterprise;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Fav Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavEnterpriseUserMePreferredEnterpriseGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FavEnterpriseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavEnterpriseUserMePreferredEnterpriseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDataUserMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDataUserMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} favEnterprise 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdateEnterpriseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Fav Enterprise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavEnterpriseUserMePreferredEnterpriseGet(options?: any): AxiosPromise<FavEnterpriseResponse> {
            return localVarFp.getFavEnterpriseUserMePreferredEnterpriseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDataUserMeGet(options?: any): AxiosPromise<CurrentUserResponse> {
            return localVarFp.getUserDataUserMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Enterprise
         * @param {number} favEnterprise 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise: number, options?: any): AxiosPromise<UserUpdateEnterpriseResponse> {
            return localVarFp.updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get Fav Enterprise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getFavEnterpriseUserMePreferredEnterpriseGet(options?: any) {
        return UserApiFp(this.configuration).getFavEnterpriseUserMePreferredEnterpriseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserDataUserMeGet(options?: any) {
        return UserApiFp(this.configuration).getUserDataUserMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Enterprise
     * @param {number} favEnterprise 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise: number, options?: any) {
        return UserApiFp(this.configuration).updateEnterpriseUserMePreferredEnterprisePatch(favEnterprise, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VatRateApi - axios parameter creator
 * @export
 */
export const VatRateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Vatrate
         * @param {VatrateInput} vatrateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVatrateVatratePost: async (vatrateInput: VatrateInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vatrateInput' is not null or undefined
            assertParamExists('addVatrateVatratePost', 'vatrateInput', vatrateInput)
            const localVarPath = `/vatrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vatrateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Vatrate
         * @param {number} vatrateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVatrateVatrateDelete: async (vatrateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vatrateId' is not null or undefined
            assertParamExists('deleteVatrateVatrateDelete', 'vatrateId', vatrateId)
            const localVarPath = `/vatrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vatrateId !== undefined) {
                localVarQueryParameter['vatrate_id'] = vatrateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Vat Rates
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVatRatesVatrateGet: async (page: number, enterpriseId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getVatRatesVatrateGet', 'page', page)
            // verify required parameter 'enterpriseId' is not null or undefined
            assertParamExists('getVatRatesVatrateGet', 'enterpriseId', enterpriseId)
            const localVarPath = `/vatrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (enterpriseId !== undefined) {
                localVarQueryParameter['enterprise_id'] = enterpriseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VatRateApi - functional programming interface
 * @export
 */
export const VatRateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VatRateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Vatrate
         * @param {VatrateInput} vatrateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVatrateVatratePost(vatrateInput: VatrateInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VatRateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVatrateVatratePost(vatrateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Vatrate
         * @param {number} vatrateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVatrateVatrateDelete(vatrateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVatrateVatrateDelete(vatrateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Vat Rates
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVatRatesVatrateGet(page: number, enterpriseId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VatRateResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVatRatesVatrateGet(page, enterpriseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VatRateApi - factory interface
 * @export
 */
export const VatRateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VatRateApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Vatrate
         * @param {VatrateInput} vatrateInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVatrateVatratePost(vatrateInput: VatrateInput, options?: any): AxiosPromise<VatRateResponse> {
            return localVarFp.addVatrateVatratePost(vatrateInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Vatrate
         * @param {number} vatrateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVatrateVatrateDelete(vatrateId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deleteVatrateVatrateDelete(vatrateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Vat Rates
         * @param {number} page 
         * @param {number} enterpriseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVatRatesVatrateGet(page: number, enterpriseId: number, options?: any): AxiosPromise<Array<VatRateResponse>> {
            return localVarFp.getVatRatesVatrateGet(page, enterpriseId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VatRateApi - object-oriented interface
 * @export
 * @class VatRateApi
 * @extends {BaseAPI}
 */
export class VatRateApi extends BaseAPI {
    /**
     * 
     * @summary Add Vatrate
     * @param {VatrateInput} vatrateInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatRateApi
     */
    public addVatrateVatratePost(vatrateInput: VatrateInput, options?: any) {
        return VatRateApiFp(this.configuration).addVatrateVatratePost(vatrateInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Vatrate
     * @param {number} vatrateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatRateApi
     */
    public deleteVatrateVatrateDelete(vatrateId: number, options?: any) {
        return VatRateApiFp(this.configuration).deleteVatrateVatrateDelete(vatrateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Vat Rates
     * @param {number} page 
     * @param {number} enterpriseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatRateApi
     */
    public getVatRatesVatrateGet(page: number, enterpriseId: number, options?: any) {
        return VatRateApiFp(this.configuration).getVatRatesVatrateGet(page, enterpriseId, options).then((request) => request(this.axios, this.basePath));
    }
}


